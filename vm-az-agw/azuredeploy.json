{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "numberOfInstances": {
            "type": "int",
            "metadata": {
                "description": "The number of instances that need to be deployed"
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "AdminUser",
            "metadata": {
                "description": "Admin user name"
            }
        },
        "adminPassword": {
            "type": "string",
            "minLength": 12,
            "maxLength": 72,
            "metadata": {
                "description": "Admin password"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s",
            "allowedValues": [
                "Standard_B1s",
                "Standard_B1ms",
                "Standard_B2s",
                "Standard_B2ms",
                "Standard_B4ms",
                "Standard_B8ms"
            ],
            "metadata": {
                "description": "Virtual machine size"
            }
        },
        "imagePublisher": {
            "type": "string",
            "defaultValue": "MicrosoftWindowsServer",
            "allowedValues": [
                "MicrosoftWindowsServer"
            ],
            "metadata": {
                "description": "Image publisher, e.g. MicrosoftWindowsServer"
            }
        },
        "imageOffer": {
            "type": "string",
            "defaultValue": "WindowsServer",
            "allowedValues": [
                "WindowsServer"
            ],
            "metadata": {
                "description": "Image offer, e.g. WindowsServer"
            }
        },
        "imageSku": {
            "type": "string",
            "defaultValue": "2019-Datacenter-smalldisk",
            "allowedValues": [
                "2008-R2-SP1",
                "2012-Datacenter",
                "2012-R2-Datacenter",
                "2016-Datacenter",
                "2016-Datacenter-smalldisk",
                "2016-Datacenter-with-Containers",
                "2019-Datacenter",
                "2019-Datacenter-smalldisk"
            ],
            "metadata": {
                "description": "Windows version"
            }
        },
        "imageVersion": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Image version"
            }
        },
        "osType": {
            "type": "string",
            "defaultValue": "Windows",
            "metadata": {
                "description": "OS type"
            }
        },
        "osDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "allowedValues": [
                "StandardSSD_LRS",
                "Standard_LRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "OS disk type"
            }
        },
        "osDiskCaching": {
            "type": "string",
            "defaultValue": "ReadWrite",
            "allowedValues": [
                "ReadWrite",
                "ReadOnly",
                "None"
            ],
            "metadata": {
                "description": "OS disk caching"
            }
        },
        "dataDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "allowedValues": [
                "StandardSSD_LRS",
                "Standard_LRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "OS disk type"
            }
        },
        "dataDiskCaching": {
            "type": "string",
            "defaultValue": "ReadOnly",
            "allowedValues": [
                "ReadWrite",
                "ReadOnly",
                "None"
            ],
            "metadata": {
                "description": "Data disk caching"
            }
        },
        "dataDiskSize": {
            "type": "int",
            "defaultValue": 64,
            "metadata": {
                "description": "Data disk size"
            }
        },
        "vmNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Then name prefix for the virtual machines"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the virtual network to which the virtual machines are connected"
            }
        },
        "vmSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the virtual network subnet to which the virtual machines are connected"
            }
        },
        "gwSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the virtual network subnet to which the app gateway is connected"
            }
        },        
        "virtualNetworkResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Resource group in which the virtual network is deployed"
            }
        },
        "applicationGatewayName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Application Gateway name"
            }
        },
        "minCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "Minimum instance count for Application Gateway"
            }
        },
        "maxCapacity": {
            "type": "int",
            "defaultValue": 4,
            "metadata": {
                "description": "Maximum instance count for Application Gateway"
            }
        },
        "backendIPAddresses": {
            "type": "array",
            "defaultValue": [

            ],
            "metadata": {
                "description": "Backend pool ip addresses"
            }
        },
        "cookieBasedAffinity": {
            "type": "string",
            "allowedValues": [
                "Enabled",
                "Disabled"
            ],
            "defaultValue": "Enabled",
            "metadata": {
                "description": "Cookie based affinity"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "tier": {
            "type": "string",
            "allowedValues": [
                "Standard_v2",
                "WAF_v2"
            ],
            "defaultValue": "Standard_v2",
            "metadata": {
                "description": "Tier, e.g. Standard_v2 or WAF_v2"
            }
        },
        "wafEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "WAF Enabled"
            }
        },
        "wafMode": {
            "type": "string",
            "allowedValues": [
                "Detection",
                "Prevention"
            ],
            "defaultValue": "Detection",
            "metadata": {
                "description": "WAF Mode"
            }
        },
        "wafRuleSetType": {
            "type": "string",
            "allowedValues": [
                "OWASP"
            ],
            "defaultValue": "OWASP",
            "metadata": {
                "description": "WAF Rule Set Type"
            }
        },
        "wafRuleSetVersion": {
            "type": "string",
            "allowedValues": [
                "2.2.9",
                "3.0"
            ],
            "defaultValue": "3.0",
            "metadata": {
                "description": "WAF Rule Set Version"
            }
        },
        "frontendCertData": {
            "type": "string",
            "metadata": {
                "description": "Base-64 encoded form of the .pfx file. This is the cert terminating on the Application Gateway."
            }
        },
        "frontendCertPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for .pfx certificate"
            }
        },
        "diagnosticsStorageAccount": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of the storage account to use for diagnostics."
            }
        },
        "artifactsLocation": {
            "type": "string",
            "defaultValue": "https://shuprdsamgt1.blob.core.windows.net/deployment/",
            "metadata": {
                "description": "The location for file dependencies."
            }
        }
    },
    "variables": {
        "vnetID": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
        "vmSubnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('vmSubnetName'))]",
        "gwSubnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('gwSubnetName'))]",
        "appGwPublicIpName": "[concat(parameters('applicationGatewayName'),'-pip')]",
        "appGwPublicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGwPublicIpName'))]",
        "applicationGatewayID": "[resourceId('Microsoft.Network/applicationGateways',parameters('applicationGatewayName'))]"
    },
    "resources": [
        {
            "apiVersion": "2018-08-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('appGwPublicIpName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "apiVersion": "2016-03-30",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('vmNamePrefix'), copyIndex(1), '-nic')]",
            "location": "[resourceGroup().location]",
            "copy": {
                "count": "[parameters('numberOfInstances')]",
                "name": "nicCopy"
            },
            "dependsOn": [],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[parameters('backendIPAddresses')[copyIndex()].IpAddress]",
                            "subnet": {
                                "id": "[variables('vmSubnetRef')]"
                            }
                        }
                    }
                ],
                "enableIPForwarding": false
            }
        },
        {
            "apiVersion": "2018-10-01",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('vmNamePrefix'), copyIndex(1))]",
            "zones": "[split(string(add(mod(copyIndex(),3),1)), ',')]",
            "copy": {
                "name": "vmCopy",
                "count": "[parameters('numberOfInstances')]"
            },
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "nicCopy"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(parameters('vmNamePrefix'), copyIndex(1))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[parameters('imagePublisher')]",
                        "offer": "[parameters('imageOffer')]",
                        "sku": "[parameters('imageSku')]",
                        "version": "[parameters('imageVersion')]"
                    },
                    "osDisk": {
                        "osType": "[parameters('osType')]",
                        "caching": "[parameters('osDiskCaching')]",
                        "createOption": "FromImage",
                        "name": "[concat(parameters('vmNamePrefix'), copyIndex(1), '-osdisk')]",
                        "managedDisk": {
                            "storageAccountType": "[parameters('osDiskType')]"
                        }
                    },
                    "copy": [
                        {
                            "name": "dataDisks",
                            "count": 1,
                            "input": {
                                "diskSizeGB": "[parameters('dataDiskSize')]",
                                "lun": "[copyIndex('dataDisks')]",
                                "createOption": "Empty",
                                "caching": "[parameters('dataDiskCaching')]",
                                "managedDisk": {
                                    "storageAccountType": "[parameters('dataDiskType')]"
                                }
                            }
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmNamePrefix'), copyIndex(1), '-nic'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', parameters('diagnosticsStorageAccount'), '.blob.core.windows.net')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmNamePrefix'), copyIndex(1), '/BGInfo')]",
            "apiVersion": "2017-03-30",
            "dependsOn": [
                "vmCopy"
            ],
            "copy": {
                "count": "[parameters('numberOfInstances')]",
                "name": "bgInfoCopy"
            },
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "BGInfo",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "Properties": []
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmNamePrefix'), copyIndex(1), '/DependencyAgent')]",
            "apiVersion": "2017-03-30",
            "dependsOn": [
                "vmCopy"
            ],
            "copy": {
                "count": "[parameters('numberOfInstances')]",
                "name": "dependencyAgentCopy"
            },
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmNamePrefix'), copyIndex(1), '/azureNetworkWatcher')]",
            "apiVersion": "2017-03-30",
            "dependsOn": [
                "vmCopy"
            ],
            "copy": {
                "count": "[parameters('numberOfInstances')]",
                "name": "networkWatcherCopy"
            },
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "2017-12-01",
            "name": "[concat(parameters('vmNamePrefix'), copyIndex(1), '/baseSettings')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/', parameters('vmNamePrefix'), copyIndex(1))]"
            ],            
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.9",
                "autoUpgradeMinorVersion": "true",
                "settings": {
                    "fileUris": "[createArray(concat(parameters('artifactsLocation'), 'UKRegion.xml'), concat(parameters('artifactsLocation'), 'Initialise-VM.ps1'))]",
                    "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', 'Initialise-VM.ps1',' ', concat('-diskInit ', 'true'))]"
                },
                "protectedSettings": {}
            }
        },
        {
            "apiVersion": "2018-11-01",
            "name": "[parameters('applicationGatewayName')]",
            "type": "Microsoft.Network/applicationGateways",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('appGwPublicIPRef')]",
                "vmCopy"

            ],
            "properties": {
                "sku": {
                    "name": "[parameters('tier')]",
                    "tier": "[parameters('tier')]"
                },
                "sslCertificates": [
                    {
                        "name": "appGatewayFrontEndSslCert",
                        "properties": {
                            "data": "[parameters('frontendCertData')]",
                            "password": "[parameters('frontendCertPassword')]"
                        }
                    }
                ],
                "autoscaleConfiguration": {
                    "minCapacity": "[parameters('minCapacity')]",
                    "maxCapacity": "[parameters('maxCapacity')]"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[variables('gwSubnetRef')]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGatewayFrontendIP",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[variables('appGwPublicIpRef')]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "appGatewayFrontendPort80",
                        "properties": {
                            "Port": 80
                        }
                    },
                    {
                        "name": "appGatewayFrontendPort443",
                        "properties": {
                            "Port": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "appGatewayBackendPool",
                        "properties": {
                            "BackendAddresses": "[parameters('backendIPAddresses')]"
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "appGatewayBackendHttpSettings",
                        "properties": {
                            "Port": 80,
                            "Protocol": "Http",
                            "CookieBasedAffinity": "[parameters('cookieBasedAffinity')]"
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "appGatewayHttpListener",
                        "properties": {
                            "FrontendIPConfiguration": {
                                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
                            },
                            "FrontendPort": {
                                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort80')]"
                            },
                            "Protocol": "Http",
                            "SslCertificate": null
                        }
                    },
                    {
                        "name": "appGatewayHttpsListener",
                        "properties": {
                            "FrontendIPConfiguration": {
                                "Id": "[concat(variables('applicationGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
                            },
                            "FrontendPort": {
                                "Id": "[concat(variables('applicationGatewayID'), '/frontendPorts/appGatewayFrontendPort443')]"
                            },
                            "Protocol": "Https",
                            "SslCertificate": {
                                "Id": "[concat(variables('applicationGatewayID'), '/sslCertificates/appGatewayFrontEndSslCert')]"
                            }
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "HTTPRule",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayHttpListener')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
                            }
                        }
                    },
                    {
                        "Name": "HTTPSRule",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[concat(variables('applicationGatewayID'), '/httpListeners/appGatewayHttpsListener')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('applicationGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(variables('applicationGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
                            }
                        }
                    }
                ],
                "webApplicationFirewallConfiguration": {
                    "enabled": "[parameters('wafEnabled')]",
                    "firewallMode": "[parameters('wafMode')]",
                    "ruleSetType": "[parameters('wafRuleSetType')]",
                    "ruleSetVersion": "[parameters('wafRuleSetVersion')]",
                    "disabledRuleGroups": []
                }
            }
        }        
    ],
    "outputs": {}
}